#jinja2: lstrip_blocks: "True"
{% for ni, prop in network_instance.items() %}
{% if prop._state|default('present') != 'deleted' %}
- path: /network-instance[name={{ni}}]
  value:
    admin-state: enable
    description: {{prop.description|default('no description')}}
    {% if prop.type is defined %}
    type: {{ prop.type }}
    {% endif %}
    {% if prop.type|default('default') == 'default' %}
    ip-forwarding:
      receive-ipv4-check: {{ prop["receive-ipv4-check"] | default(True) }}
    {% endif %}
    {% if prop.interfaces is defined and prop.interfaces is not none %}
    interface:
      {% for itf in prop.interfaces %} 
      - name: {{ itf }}
      {% endfor %}
    {% endif %}
    {% if prop.vxlan_interface is defined and prop.vxlan_interface is not none %}
    vxlan-interface:
      {% for vxlan_itf in prop.vxlan_interface %}
      - name: {{ vxlan_itf }}
      {% endfor %}
    {% endif %}
    {% if prop.protocols is defined and prop.protocols is not none %}
    protocols:
      {% if prop.protocols.bgp_evpn is defined %}
      bgp-evpn:
        bgp-instance:
          - id: 1
            admin-state: enable
            vxlan-interface: {{ prop.protocols.bgp_evpn.vxlan_interface }}
            evi: {{ prop.protocols.bgp_evpn.evi }}
            ecmp: 4
      {% endif %}
      {% if prop.protocols.bgp_vpn is defined %}
      bgp-vpn:
        bgp-instance:
          - id: 1
            route-target:
              export-rt: "target:{{prop.protocols.bgp_vpn.export_rt}}"
              import-rt: "target:{{prop.protocols.bgp_vpn.import_rt}}"
      {% endif %}
      {% if prop.protocols.bgp is defined %}
      bgp:
        {% if prop.type|default('routed') != 'bridged' %}
        autonomous-system: {{ asn }}
        router-id: {{router_id }}
        {% endif %}
        {% if prop.protocols.bgp.dynamic is defined %}
        dynamic-neighbors:
          interface:
          {% for nbr_itf, nbr_prop in prop.protocols.bgp.dynamic.interfaces.items() %} 
          - allowed-peer-as: {{ nbr_prop["allow-as"] }}
            interface-name: {{ nbr_itf }}
            peer-group: {{ nbr_prop["peer-group"] }}
          {% endfor %}
        {% endif %}
        afi-safi:
        {% if prop.protocols.bgp.ipv4 is defined %}
          - afi-safi-name: "ipv4-unicast"
            admin-state: {{ prop.protocols.bgp.ipv4.admin_state|default('disable') }}
            multipath:
              allow-multiple-as: true
              max-paths-level-1: {{prop.protocols.bgp.ipv4.multipath|default(2) }}
              max-paths-level-2: {{prop.protocols.bgp.ipv4.multipath|default(2) }}
        {% endif %}
          - afi-safi-name: evpn
            admin-state: enable
            multipath:
              max-paths-level-1: 2
              max-paths-level-1: 2
        group:
        {% for group, group_spec in prop.protocols.bgp.group.items() %}
        - group-name: {{ group }}
          description: {{ group_spec.description|default('no description') }}
          {% if group_spec.peer_as is defined %}
          peer-as: {{ group_spec.peer_as }}
          {% endif %}
          export-policy: {{ group_spec.export_policy }}
          import-policy: {{ group_spec.import_policy }}
          afi-safi:
            - afi-safi-name: "ipv4-unicast" 
              admin-state: {{ group_spec.ipv4.admin_state|default('disable') }}
            - afi-safi-name: "evpn" 
              admin-state: {{ group_spec.evpn.admin_state|default('disable') }}
          {% if group_spec.local_as is defined %}
          local-as:
            as-number: {{ group_spec.local_as }}
          {% endif %}
          {% if group_spec.local_address is defined %}
          transport:
            local-address: {{ group_spec.local_address }}
          {% endif %}
          {% if group_spec.cluster_id is defined %}
          route-reflector:
            client: true
            cluster-id: {{ group_spec.cluster_id }}
          {% endif %}
        {% endfor %}
        neighbor:
        {% for nbr, nbr_spec in prop.protocols.bgp.neighbor.items() %}
        - peer-address: {{ nbr }}
          peer-group: {{ nbr_spec.peer_group }}
          {% if nbr_spec.peer_as is defined %}
          peer-as: {{ nbr_spec.peer_as }}
          {% endif %}
        {% endfor %}
      {% endif %}
  {% endif %}

{% endif %}
{% endfor %}
