#jinja2: lstrip_blocks: "True"
{% for ni, prop in network_instance.items() %}
- path: /network-instance[name={{ni}}]
  value:
    admin-state: enable
    interface:
    {% for itf in prop.interfaces %} 
      - name: {{ itf }}
    {% endfor %}
    protocols:
      bgp:
        autonomous-system: {{ asn }}
        router-id: {{router_id }}
        {% if prop.protocols.bgp.ipv4 is defined %}
        ipv4-unicast:
          admin-state: {{ prop.protocols.bgp.ipv4.admin_state|default('disable') }}
          multipath:
            allow-multiple-as: true
            max-paths-level-1: {{prop.protocols.bgp.ipv4.multipath|default(1) }}
            max-paths-level-2: {{prop.protocols.bgp.ipv4.multipath|default(1) }}
        {% endif %}
        group:
        {% for group, group_spec in prop.protocols.bgp.group.items() %}
        - group-name: {{ group }}
          description: {{ group_spec.description|default('no description') }}
          {% if group_spec.peer_as is defined %}
          peer-as: {{ group_spec.peer_as }}
          {% endif %}
          export-policy: {{ group_spec.export_policy }}
          import-policy: {{ group_spec.import_policy }}
          ipv4-unicast: 
            admin-state: {{ group_spec.ipv4.admin_state|default('disable') }}
          evpn:
            admin-state: {{ group_spec.evpn.admin_state|default('disable') }}
          {% if group_spec.local_as is defined %}
          local-as:
            as-number: {{ group_spec.local_as }}
          {% endif %}
          {% if group_spec.local_address is defined %}
          transport:
            local-address: {{ group_spec.local_address }}
          {% endif %}
          {% if group_spec.cluster_id is defined %}
          route-reflector:
            client: true
            cluster-id: {{ group_spec.cluster_id }}
          {% endif %}
        {% endfor %}
        neighbor:
        {% for nbr, nbr_spec in prop.protocols.bgp.neighbor.items() %}
        - peer-address: {{ nbr }}
          peer-group: {{ nbr_spec.peer_group }}
          {% if nbr_spec.peer_as is defined %}
          peer-as: {{ nbr_spec.peer_as }}
          {% endif %}
        {% endfor %}
{% endfor %}
